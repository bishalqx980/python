import json
import time
import requests
from bot import logger

class DevFunc:
    def send_req(bot_token, method, data=None, files=None):
        starting_time = time.time()
        logger.info("Execution started...")
        API_URL = f"https://api.telegram.org/bot{bot_token}"
        try:
            if files:
                res = requests.get(f"{API_URL}/{method}", data, files=files)
            else:
                res = requests.get(f"{API_URL}/{method}", data)
            end_time = time.time()
            logger.info(f"Execution time: {(end_time - starting_time):.2f}s")
            return res
        except Exception as e:
            logger.error(e)
    
    def output_res(res):
        try:
            data = json.loads(res.text)
            with open("output.json", "w") as f:
                json.dump(data, f, indent=4)
        except Exception as e:
            logger.error(e)


class Bot:
    def get_updates(bot_token, output_res=bool(False)):
        res = DevFunc.send_req(bot_token, "getUpdates")
        if output_res:
            DevFunc.output_res(res)
        
        if res.status_code != 200:
            logger.info(res.text)
            return
        return res.text
    
    
    def get_bot(bot_token, output_res=bool(False)):
        res = DevFunc.send_req(bot_token, "getMe")
        if output_res:
            DevFunc.output_res(res)
        
        if res.status_code != 200:
            logger.info(res.text)
            return
        return res.text
    

    def set_bot_name(bot_token, name, output_res=bool(False)):
        data = {
            "name": name
        }

        res = DevFunc.send_req(bot_token, "setMyName", data)
        if output_res:
            DevFunc.output_res(res)
        
        if res.status_code != 200:
            logger.info(res.text)
            return
        return res.text
    

    def set_bot_desc(bot_token, description, output_res=bool(False)):
        data = {
            "description": description
        }

        res = DevFunc.send_req(bot_token, "setMyDescription", data)
        if output_res:
            DevFunc.output_res(res)
        
        if res.status_code != 200:
            logger.info(res.text)
            return
        return res.text
    

    def set_bot_short_desc(bot_token, short_description, output_res=bool(False)):
        data = {
            "short_description": short_description
        }

        res = DevFunc.send_req(bot_token, "setMyShortDescription", data)
        if output_res:
            DevFunc.output_res(res)
        
        if res.status_code != 200:
            logger.info(res.text)
            return
        return res.text


class ChatBot:
    def send_message(bot_token, chat_id, text, output_res=bool(False)):
        data = {
            "chat_id": chat_id,
            "text": text
        }

        res = DevFunc.send_req(bot_token, "sendMessage", data)
        if output_res:
            DevFunc.output_res(res)
        
        if res.status_code != 200:
            logger.info(res.text)
            return
        return res.text
    

    def forward_message(bot_token, from_chat_id, to_chat_id, forward_message_id, output_res=bool(False)):
        data = {
            "chat_id": to_chat_id,
            "from_chat_id": from_chat_id,
            "message_id": forward_message_id
        }

        res = DevFunc.send_req(bot_token, "forwardMessage", data)
        if output_res:
            DevFunc.output_res(res)
        
        if res.status_code != 200:
            logger.info(res.text)
            return
        return res.text
    

    def forward_messages(bot_token, from_chat_id, to_chat_id, forward_message_ids, output_res=bool(False)):
        data = {
            "chat_id": to_chat_id,
            "from_chat_id": from_chat_id,
            "message_ids": forward_message_ids
        }

        res = DevFunc.send_req(bot_token, "forwardMessages", data)
        if output_res:
            DevFunc.output_res(res)
        
        if res.status_code != 200:
            logger.info(res.text)
            return
        return res.text
    

    def send_photo(bot_token, chat_id, photo_location, caption=None, is_photo_url=bool(False), output_res=bool(False)):
        data = {
            "chat_id": chat_id,
            "caption": caption
        }

        if is_photo_url:
            data["photo"] = photo_location
            res = DevFunc.send_req(bot_token, "sendPhoto", data)
        else:
            try:
                with open(photo_location, "rb") as f:
                    photo_location = {"photo": f.read()}
            except Exception as e:
                logger.error(e)
                return
            res = DevFunc.send_req(bot_token, "sendPhoto", data, photo_location)
        
        if output_res:
            DevFunc.output_res(res)
        
        if res.status_code != 200:
            logger.info(res.text)
            return
        return res.text
    

    def send_audio(bot_token, chat_id, audio_location, caption=None, is_audio_url=bool(False), output_res=bool(False)):
        data = {
            "chat_id": chat_id,
            "caption": caption
        }

        if is_audio_url:
            data["audio"] = audio_location
            res = DevFunc.send_req(bot_token, "sendAudio", data)
        else:
            try:
                with open(audio_location, "rb") as f:
                    audio_location = {"audio": f.read()}
            except Exception as e:
                logger.error(e)
                return
            res = DevFunc.send_req(bot_token, "sendAudio", data, audio_location)
        
        if output_res:
            DevFunc.output_res(res)
        
        if res.status_code != 200:
            logger.info(res.text)
            return
        return res.text
    

    def send_document(bot_token, chat_id, document_location, caption=None, is_doc_url=bool(False), output_res=bool(False)):
        data = {
            "chat_id": chat_id,
            "caption": caption
        }

        if is_doc_url:
            data["document"] = document_location
            res = DevFunc.send_req(bot_token, "sendDocument", data)
        else:
            try:
                with open(document_location, "rb") as f:
                    document_location = {"document": f.read()}
            except Exception as e:
                logger.error(e)
                return
            res = DevFunc.send_req(bot_token, "sendDocument", data, document_location)
        
        if output_res:
            DevFunc.output_res(res)
        
        if res.status_code != 200:
            logger.info(res.text)
            return
        return res.text
    

    def send_video(bot_token, chat_id, video_location, caption=None, is_video_url=bool(False), output_res=bool(False)):
        data = {
            "chat_id": chat_id,
            "caption": caption
        }

        if is_video_url:
            data["video"] = video_location
            res = DevFunc.send_req(bot_token, "sendVideo", data)
        else:
            try:
                with open(video_location, "rb") as f:
                    video_location = {"video": f.read()}
            except Exception as e:
                logger.error(e)
                return
            res = DevFunc.send_req(bot_token, "sendVideo", data, video_location)
        
        if output_res:
            DevFunc.output_res(res)
        
        if res.status_code != 200:
            logger.info(res.text)
            return
        return res.text
    

    def set_message_reaction(bot_token, chat_id, message_id, reaction_emoji, is_big=bool(False), output_res=bool(False)):
        reaction = [{"type": "emoji", "emoji": reaction_emoji}]
        data = {
            "chat_id": chat_id,
            "message_id": message_id,
            "reaction": json.dumps(reaction)
        }

        if is_big:
            data["is_big"] = True
            
        res = DevFunc.send_req(bot_token, "setMessageReaction", data)
        if output_res:
            DevFunc.output_res(res)
        
        if res.status_code != 200:
            logger.info(res.text)
            return
        return res.text
    

    def ban_chat_member(bot_token, chat_id, victim_id, output_res=bool(False)):
        data = {
            "chat_id": chat_id,
            "user_id": victim_id
        }

        res = DevFunc.send_req(bot_token, "banChatMember", data)
        if output_res:
            DevFunc.output_res(res)
        
        if res.status_code != 200:
            logger.info(res.text)
            return
        return res.text
    

    def unban_chat_member(bot_token, chat_id, victim_id, output_res=bool(False)):
        data = {
            "chat_id": chat_id,
            "user_id": victim_id,
            "only_if_banned": True
        }

        res = DevFunc.send_req(bot_token, "unbanChatMember", data)
        if output_res:
            DevFunc.output_res(res)
        
        if res.status_code != 200:
            logger.info(res.text)
            return
        return res.text
    

    def kick_chat_member(bot_token, chat_id, victim_id, output_res=bool(False)):
        data = {
            "chat_id": chat_id,
            "user_id": victim_id
        }

        res = DevFunc.send_req(bot_token, "unbanChatMember", data)
        if output_res:
            DevFunc.output_res(res)
        
        if res.status_code != 200:
            logger.info(res.text)
            return
        return res.text
    

    def mute_chat_member(bot_token, chat_id, victim_id, output_res=bool(False)):
        data = {
            "chat_id": chat_id,
            "user_id": victim_id,
            "permissions": {
                "can_send_messages": False,
                "can_send_audios": False,
                "can_send_documents": False,
                "can_send_photos": False,
                "can_send_videos": False,
                "can_send_video_notes": False,
                "can_send_voice_notes": False,
                "can_send_polls": False,
                "can_send_other_messages": False,
                "can_add_web_page_previews": False,
                "can_invite_users": False,
                "can_pin_messages": False,
                "can_manage_topics": False

            }
        }

        res = DevFunc.send_req(bot_token, "restrictChatMember", data)
        if output_res:
            DevFunc.output_res(res)
        
        if res.status_code != 200:
            logger.info(res.text)
            return
        return res.text
    

    def unmute_chat_member(bot_token, chat_id, victim_id, output_res=bool(False)):
        data = {
            "chat_id": chat_id,
            "user_id": victim_id,
            "permissions": {
                "can_send_messages": True,
                "can_send_audios": True,
                "can_send_documents": True,
                "can_send_photos": True,
                "can_send_videos": True,
                "can_send_video_notes": True,
                "can_send_voice_notes": True,
                "can_send_polls": True,
                "can_send_other_messages": True,
                "can_add_web_page_previews": True,
                "can_invite_users": True,
                "can_pin_messages": True,
                "can_manage_topics": True

            }
        }

        res = DevFunc.send_req(bot_token, "restrictChatMember", data)
        if output_res:
            DevFunc.output_res(res)
        
        if res.status_code != 200:
            logger.info(res.text)
            return
        return res.text
    

    def promote_demote_chat_member(bot_token, chat_id, user_id, full_promote=bool(False), demote=bool(False), output_res=bool(False)):
        """
        default: promote with only invite permission
        """
        if full_promote and demote:
            logger.error("can't use both statement together...")
            return
        
        permission, invite_permission = False, True

        if full_promote:
            permission = invite_permission = True
        elif demote:
            permission = invite_permission = False
        
        data = {
            "chat_id": chat_id,
            "user_id": user_id,
            "is_anonymous": permission,
            "can_manage_chat": permission,
            "can_delete_messages": permission,
            "can_manage_video_chats": permission,
            "can_restrict_members": permission,
            "can_promote_members": permission,
            "can_change_info": permission,
            "can_invite_users": invite_permission, # only true
            "can_post_stories": permission,
            "can_edit_stories": permission,
            "can_delete_stories": permission,
            "can_post_messages": permission,
            "can_edit_messages": permission,
            "can_pin_messages": permission,
            "can_manage_topics": permission
        }

        res = DevFunc.send_req(bot_token, "promoteChatMember", data)
        if output_res:
            DevFunc.output_res(res)
        
        if res.status_code != 200:
            logger.info(res.text)
            return
        return res.text
    

    def set_admin_title(bot_token, chat_id, user_id, custom_title, output_res=bool(False)):
        data = {
            "chat_id": chat_id,
            "user_id": user_id,
            "custom_title": custom_title
        }

        res = DevFunc.send_req(bot_token, "setChatAdministratorCustomTitle", data)
        if output_res:
            DevFunc.output_res(res)
        
        if res.status_code != 200:
            logger.info(res.text)
            return
        return res.text
    

    def lock_chat(bot_token, chat_id, output_res=bool(False)):
        data = {
            "chat_id": chat_id,
            "permissions": {
                "can_send_messages": False,
                "can_send_audios": False,
                "can_send_documents": False,
                "can_send_photos": False,
                "can_send_videos": False,
                "can_send_video_notes": False,
                "can_send_voice_notes": False,
                "can_send_polls": False,
                "can_send_other_messages": False,
                "can_add_web_page_previews": False,
                "can_change_info": False,
                "can_invite_users": False,
                "can_pin_messages": False,
                "can_manage_topics": False

            }
        }

        res = DevFunc.send_req(bot_token, "setChatPermissions", data)
        if output_res:
            DevFunc.output_res(res)
        
        if res.status_code != 200:
            logger.info(res.text)
            return
        return res.text
    

    def unlock_chat(bot_token, chat_id, output_res=bool(False)):
        data = {
            "chat_id": chat_id,
            "permissions": {
                "can_send_messages": True,
                "can_send_audios": True,
                "can_send_documents": True,
                "can_send_photos": True,
                "can_send_videos": True,
                "can_send_video_notes": True,
                "can_send_voice_notes": True,
                "can_send_polls": True,
                "can_send_other_messages": True,
                "can_add_web_page_previews": True,
                "can_change_info": True,
                "can_invite_users": True,
                "can_pin_messages": True,
                "can_manage_topics": True

            }
        }

        res = DevFunc.send_req(bot_token, "setChatPermissions", data)
        if output_res:
            DevFunc.output_res(res)
        
        if res.status_code != 200:
            logger.info(res.text)
            return
        return res.text
    

    def export_chat_invite_link(bot_token, chat_id, output_res=bool(False)):
        data = {
            "chat_id": chat_id
        }

        res = DevFunc.send_req(bot_token, "exportChatInviteLink", data)
        if output_res:
            DevFunc.output_res(res)
        
        if res.status_code != 200:
            logger.info(res.text)
            return
        return res.text
    

    def create_chat_invite_link(bot_token, chat_id, name="???", member_limit=None, creates_join_request=bool(False), output_res=bool(False)):
        data = {
            "chat_id": chat_id,
            "name": name,
            "member_limit": member_limit,
            "creates_join_request": creates_join_request
        }

        res = DevFunc.send_req(bot_token, "createChatInviteLink", data)
        if output_res:
            DevFunc.output_res(res)
        
        if res.status_code != 200:
            logger.info(res.text)
            return
        return res.text
    

    def approve_chat_join_req(bot_token, chat_id, user_id, output_res=bool(False)):
        data = {
            "chat_id": chat_id,
            "user_id": user_id
        }

        res = DevFunc.send_req(bot_token, "approveChatJoinRequest", data)
        if output_res:
            DevFunc.output_res(res)
        
        if res.status_code != 200:
            logger.info(res.text)
            return
        return res.text
    

    def decline_chat_join_req(bot_token, chat_id, user_id, output_res=bool(False)):
        data = {
            "chat_id": chat_id,
            "user_id": user_id
        }

        res = DevFunc.send_req(bot_token, "declineChatJoinRequest", data)
        if output_res:
            DevFunc.output_res(res)
        
        if res.status_code != 200:
            logger.info(res.text)
            return
        return res.text
    

    def set_chat_photo(bot_token, chat_id, photo, output_res=bool(False)):
        data = {
            "chat_id": chat_id
        }

        try:
            with open(photo, "rb") as f:
                photo = {"photo": f.read()}
        except Exception as e:
            logger.error(e)
            return
        res = DevFunc.send_req(bot_token, "setChatPhoto", data, photo)
        
        if output_res:
            DevFunc.output_res(res)
        
        if res.status_code != 200:
            logger.info(res.text)
            return
        return res.text
    

    def delete_chat_photo(bot_token, chat_id, output_res=bool(False)):
        data = {
            "chat_id": chat_id
        }

        res = DevFunc.send_req(bot_token, "deleteChatPhoto", data)
        if output_res:
            DevFunc.output_res(res)
        
        if res.status_code != 200:
            logger.info(res.text)
            return
        return res.text


    def set_chat_title(bot_token, chat_id, title, output_res=bool(False)):
        data = {
            "chat_id": chat_id,
            "title": title
        }

        res = DevFunc.send_req(bot_token, "setChatTitle", data)
        if output_res:
            DevFunc.output_res(res)
        
        if res.status_code != 200:
            logger.info(res.text)
            return
        return res.text


    def set_chat_desc(bot_token, chat_id, description, output_res=bool(False)):
        data = {
            "chat_id": chat_id,
            "description": description
        }

        res = DevFunc.send_req(bot_token, "setChatDescription", data)
        if output_res:
            DevFunc.output_res(res)
        
        if res.status_code != 200:
            logger.info(res.text)
            return
        return res.text


    def unpinall_msg(bot_token, chat_id, output_res=bool(False)):
        data = {
            "chat_id": chat_id
        }

        res = DevFunc.send_req(bot_token, "unpinAllChatMessages", data)
        if output_res:
            DevFunc.output_res(res)
        
        if res.status_code != 200:
            logger.info(res.text)
            return
        return res.text
    

    def leave_chat(bot_token, chat_id, output_res=bool(False)):
        data = {
            "chat_id": chat_id
        }

        res = DevFunc.send_req(bot_token, "leaveChat", data)
        if output_res:
            DevFunc.output_res(res)
        
        if res.status_code != 200:
            logger.info(res.text)
            return
        return res.text
    

    def get_chat(bot_token, chat_id, output_res=bool(False)):
        data = {
            "chat_id": chat_id
        }

        res = DevFunc.send_req(bot_token, "getChat", data)
        if output_res:
            DevFunc.output_res(res)
        
        if res.status_code != 200:
            logger.info(res.text)
            return
        return res.text


    def get_chat_admins(bot_token, chat_id, output_res=bool(False)):
        data = {
            "chat_id": chat_id
        }

        res = DevFunc.send_req(bot_token, "getChatAdministrators", data)
        if output_res:
            DevFunc.output_res(res)
        
        if res.status_code != 200:
            logger.info(res.text)
            return
        return res.text
    

    def get_chat_member_count(bot_token, chat_id, output_res=bool(False)):
        data = {
            "chat_id": chat_id
        }

        res = DevFunc.send_req(bot_token, "getChatMemberCount", data)
        if output_res:
            DevFunc.output_res(res)
        
        if res.status_code != 200:
            logger.info(res.text)
            return
        return res.text
    

    def get_chat_member(bot_token, chat_id, user_id, output_res=bool(False)):
        data = {
            "chat_id": chat_id,
            "user_id": user_id
        }

        res = DevFunc.send_req(bot_token, "getChatMember", data)
        if output_res:
            DevFunc.output_res(res)
        
        if res.status_code != 200:
            logger.info(res.text)
            return
        return res.text
